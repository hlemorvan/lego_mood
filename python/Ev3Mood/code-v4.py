import colorsys
import os
from PIL import Image
import random
"""
from ev3.ev3dev import Motor
from ev3.lego import ColorSensor
"""
import unittest
from time import sleep
"""
from util import get_input

d=Motor(port=Motor.PORT.A)
d.reset()
c = ColorSensor()
d.setup_forever(200,speed_regulation = True)
"""

size = (300,40)


colors=[
    (228, 203, 328),
    (236, 212, 335),
    (251, 224, 344),
    (268, 239, 360),
    (277, 244, 368),
    (281, 247, 372),
    (267, 241, 357),
    (274, 248, 363),
    (283, 254, 372),
    (286, 256, 374),
    (294, 262, 382),
    (330, 285, 410),
    (336, 286, 413),
    (340, 290, 413),
    (345, 293, 411),
    (346, 295, 408),
    (349, 298, 404),
    (347, 299, 400),
    (347, 299, 398),
    (344, 298, 390),
    (340, 296, 382),
    (338, 295, 373),
    (330, 292, 357),
    (321, 288, 337),
    (309, 283, 318),
    (300, 279, 298),
    (284, 272, 275),
    (268, 262, 255),
    (247, 247, 230),
    (220, 214, 193),
    (196, 184, 162),
    (155, 153, 124),
    (134, 142, 104),
    (128, 137, 97),
    (107, 124, 73),
    (93, 113, 64),
    (79, 104, 61),
    (71, 97, 59),
    (64, 92, 59),
    (59, 87, 58),
    (56, 85, 58),
    (56, 84, 60),
    (56, 81, 60),
    (56, 80, 60),
    (59, 80, 59),
    (61, 78, 59),
    (63, 79, 60),
    (66, 80, 59),
    (72, 78, 59),
    (78, 79, 59),
    (86, 79, 59),
    (93, 81, 59),
    (105, 79, 58),
    (122, 66, 58),
    (136, 60, 59),
    (145, 70, 60),
    (159, 83, 50),
    (180, 90, 44),
    (213, 88, 57),
    (224, 86, 60),
    (233, 86, 60),
    (235, 83, 59),
    (238, 84, 59),
    (245, 88, 59),
    (249, 88, 59),
    (248, 86, 59),
    (248, 85, 60),
    (250, 85, 62),
    (250, 86, 63),
    (253, 87, 65),
    (256, 88, 66),
    (260, 89, 70),
    (263, 92, 72),
    (267, 91, 73),
    (271, 85, 76),
    (275, 80, 77),
    (280, 65, 81),
    (277, 65, 85),
    (278, 70, 77),
    (281, 74, 73),
    (287, 76, 67),
    (294, 80, 63),
    (299, 81, 68),
    (305, 83, 70),
    (306, 82, 71),
    (307, 82, 72),
    (308, 82, 71),
    (309, 82, 70),
    (309, 83, 69),
    (309, 83, 67),
    (309, 84, 67),
    (312, 86, 68),
    (313, 87, 69),
    (313, 90, 69),
    (316, 93, 69),
    (314, 95, 69),
    (317, 99, 72),
    (318, 103, 73),
    (320, 107, 76),
    (312, 122, 74),
    (307, 146, 72),
    (310, 161, 71),
    (320, 178, 68),
    (317, 174, 68),
    (323, 183, 73),
    (325, 189, 82),
    (323, 193, 88),
    (324, 195, 88),
    (325, 199, 89),
    (329, 206, 89),
    (327, 207, 90),
    (324, 208, 88),
    (321, 206, 87),
    (313, 204, 87),
    (309, 203, 86),
    (307, 203, 87),
    (304, 202, 87),
    (296, 200, 87),
    (291, 199, 87),
    (279, 198, 86),
    (266, 196, 85),
    (254, 195, 84),
    (235, 189, 84),
    (214, 172, 84),
    (194, 153, 85),
    (152, 149, 82),
    (126, 150, 75),
    (107, 153, 68),
    (94, 153, 71),
    (84, 153, 75),
    (80, 153, 75),
    (77, 151, 78),
    (70, 148, 81),
    (70, 147, 81),
    (62, 144, 83),
    (60, 144, 83),
    (60, 143, 84),
    (59, 143, 83),
    (59, 143, 87),
    (60, 144, 93),
    (61, 145, 102),
    (61, 142, 115),
    (61, 137, 129),
    (60, 137, 140),
    (57, 134, 150),
    (56, 130, 158),
    (56, 119, 169),
    (54, 107, 183),
    (50, 103, 193),
    (47, 104, 198),
    (44, 108, 206),
    (45, 109, 211),
    (49, 108, 223),
    (49, 108, 231),
    (49, 105, 231),
    (50, 103, 231),
    (50, 102, 235),
    (51, 102, 235),
    (52, 102, 231),
    (52, 103, 231),
    (52, 104, 228),
    (53, 103, 220),
    (58, 102, 213),
    (59, 103, 212),
    (66, 104, 205),
    (72, 106, 199),
    (80, 103, 187),
    (92, 102, 174),
    (107, 100, 161),
    (133, 93, 142),
    (149, 87, 131),
    (178, 85, 109),
    (203, 90, 88),
    (215, 89, 80),
    (229, 90, 73),
    (254, 90, 67),
    (276, 89, 67),
    (292, 89, 66),
    (298, 87, 66),
    (305, 85, 66),
    (310, 85, 65),
    (310, 83, 66),
    (311, 85, 68),
    (308, 84, 71),
    (305, 84, 73),
    (300, 84, 77),
    (292, 85, 84),
    (288, 86, 91),
    (284, 88, 100),
    (272, 87, 110),
    (256, 87, 121),
    (240, 88, 131),
    (217, 89, 144),
    (199, 88, 155),
    (183, 84, 169),
    (154, 88, 186),
    (121, 95, 199),
    (94, 101, 214),
    (89, 101, 219),
    (81, 101, 224),
    (70, 99, 229),
    (63, 100, 230),
    (57, 100, 229),
    (53, 101, 229),
    (51, 102, 228),
    (49, 102, 228),
    (48, 101, 221),
    (48, 99, 217),
    (48, 101, 212),
    (48, 102, 207),
    (49, 103, 200),
    (48, 104, 194),
    (48, 105, 189),
    (49, 108, 182),
    (49, 110, 173),
    (48, 111, 161),
    (48, 108, 152),
    (48, 101, 139),
    (45, 100, 125),
    (43, 105, 117),
    (39, 115, 93),
    (40, 120, 78),
    (43, 121, 73),
    (44, 121, 72),
    (43, 122, 71),
    (43, 123, 70),
    (43, 125, 69),
    (43, 125, 68),
    (44, 125, 68),
    (45, 125, 68),
    (45, 125, 68),
    (47, 126, 69),
    (50, 125, 70),
    (50, 126, 69),
    (55, 126, 70),
    (59, 125, 71),
    (67, 125, 72),
    (81, 125, 72),
    (97, 121, 73),
    (110, 116, 75),
    (121, 108, 75),
    (138, 93, 76),
    (151, 88, 76),
    (161, 90, 75),
    (172, 93, 72),
    (191, 98, 68),
    (210, 101, 65),
    (233, 101, 68),
    (250, 100, 72),
    (265, 97, 76),
    (275, 97, 78),
    (283, 93, 77),
    (284, 92, 76),
    (282, 90, 73),
    (282, 89, 73),
    (282, 89, 72),
    (280, 89, 72),
    (276, 88, 72),
    (272, 87, 71),
    (265, 86, 68),
    (256, 85, 65),
    (248, 85, 64),
    (237, 85, 61),
    (223, 84, 58),
    (210, 83, 56),
    (197, 81, 54),
    (178, 78, 50),
    (162, 73, 47),
    (150, 67, 44),
    (130, 53, 39),
    (112, 42, 37),
    (99, 37, 35),
    (85, 31, 31),
    (66, 27, 26),
    (50, 24, 21),
    (44, 23, 20),
    (35, 22, 20),
    (28, 21, 19),
    (24, 20, 20),
    (21, 19, 20),
    (19, 19, 20),
    (16, 18, 20),
    (15, 18, 20),
    (15, 18, 20),
    (14, 18, 19),
    (15, 18, 19),
    (15, 19, 19),
    (15, 18, 20),
    (14, 18, 20),
    (14, 18, 20),
    (14, 18, 18),
    (13, 18, 19),
    (13, 18, 20),
    (13, 18, 19),
    (13, 18, 20),
    (13, 18, 19),
    (14, 19, 19),
    (13, 18, 19),
    (12, 17, 19),
    (12, 18, 20)
]
"""
colors=[]

i=0
while i < 300 :
    d.start()
    mycolor=c.rgb
    colors.append(mycolor)
    print("    {},".format(colors[i]))
    sleep(0.1)
    i=i+1
d.stop()
"""

#sur 360
Hue_color_name =[
    [355,360, "Red",1],
    [346,355, "Pink-Red",-1],
    [331,345,"Pink",-1],
    [321,330,"Magenta-Pink",-1],
    [281,320,"Magenta"],
    [241,280,"Blue-Magenta",-1],
    [221,240,"Blue",-1],
    [201,220,"Cyan-Blue",5],
    [170,200,"Cyan",-1],
    [141,169,"Green-Cyan",-1],
    [81,140,"Green",4],
    [61,80,"Yellow-Green",-1],
    [51,60,"Yellow",3],
    [41,50,"Orange-Yellow",3],
    [21,40,"Orange-Brown",3],  #jaune
    [11,20,"Red-Orange",2],
    [1,10, "Red",1]
]

#Recherche du min et du max

min=500
max=0
imin=1
imax=1

for i in range(size[0]):
    temp=colors[i][0]+colors[i][1]+colors[i][2]
    if (min > temp and i>40 and i<60):
        min=temp
        imin=i
    if max < temp:
        max=temp
        imax=i
rmax=0
gmax=0
bmax=0
for i in range(size[0]):
    rouge=colors[i][0]
    if rouge > rmax:
        rmax=rouge
    vert=colors[i][1]
    if vert > gmax:
        gmax=vert
    bleu=colors[i][2]
    if bleu > bmax:
        bmax=bleu

color2=[]
for i in range(size[0]):
    rnorm=(255*colors[i][0])/rmax
    gnorm=(255*colors[i][1])/gmax
    bnorm=(255*colors[i][2])/bmax
    color2.append([rnorm,gnorm,bnorm])

interval=imin-imax-1
#Ajustement 26->20
interval=23


print ("imin: {} imax {} interval {}".format(imin, imax, interval))

im = Image.new('RGB',size)
pix = im.load()
k=1
col = [[0] * 3 for _ in range(20)]
for i in range(size[0]):
    if i==imin:
        r=255
        g=255
        b=255
    elif i==imax:
        r=0
        g=0
        b=0
    elif i-imin==interval*k:
        k=k+1
        r=color2[i][0]
        g=color2[i][1]
        b=color2[i][2]
        col[k-1]=r, g, b
        r=255
        g=255
        b=255
    else:
        r=color2[i][0]
        g=color2[i][1]
        b=color2[i][2]

    h, s, v = colorsys.rgb_to_hsv(r/256.0, g/256.0, b/256.0)
    hue=h*360.0
    aff=0
    for j in range(0,size[1]-10):
        pix[i,j] = int(r),int(g),int(b)
    if i%10==0:
        for j in range(size[1]-10, size[1]):
            pix[i,j] = 128,128,128




nbcol=k
print ("Nb couleurs : {}".format(nbcol));

nbLego=0
total=0

for i in range(1,nbcol):
    r=col[i][0]
    g=col[i][1]
    b=col[i][2]
    h, s, v = colorsys.rgb_to_hsv(r/256.0, g/256.0, b/256.0)
    print("hue:{}".format(h*360.0))
    nomCouleur="Inconnue!"
    hue=int(h*360.0)
    for j in range (len(Hue_color_name)):
        print ("hue {} ? {} {}".format(hue,Hue_color_name[j][1],Hue_color_name[j][0]))
        if hue <= Hue_color_name[j][1] and hue >= Hue_color_name[j][0] :
            nomCouleur=Hue_color_name[j][2]
            note=Hue_color_name[j][3]
            if note > 0:
                nbLego=nbLego+1
                total=total+note
            break
    print ("couleur={} H: {} note {}".format(nomCouleur, h*360.0, note));


mood = total/nbLego
print ("nbLego {} total {} mood {}".format(nbLego, total, mood))

im.save('./ima5.png')


